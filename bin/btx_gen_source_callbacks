#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'erb'
require 'time'

REGEXT_PRETTY = /
 =\s            # We are interested to the right of the equal sign
 (
    ""|         # Empty string
    ".*?[^\\]"| # String who can contain space and quoted string
    [^\s,]+     # Anything except space and comma
 )
/x.freeze

SOURCE_TEMPLATE = <<~TEXT.freeze
  /* Code generated by #{__FILE__} */

  #include <metababel/metababel.h>

  void btx_push_usr_messages(void *btx_handle, void *usr_data, btx_source_status_t *status) {
      <%- if not data.empty? and not data.first[:hostname].nil? -%>
      btx_downstream_set_environment_hostname(btx_handle, "<%= data.first[:hostname] %>");
      <%- end -%>

      <%- data.each do | entry | -%>
      <%- entry.fetch(:times,1).times do -%>
      btx_push_message_<%= entry[:name] %>(btx_handle<%= ', ' if not entry[:field_values].empty? %><%= entry[:field_values].join(", ") %>);
      <%- end -%>
      <%- end -%>

      *status = BTX_SOURCE_END;
  }

  void btx_register_usr_callbacks(void *btx_handle) {
    btx_register_callbacks_push_usr_messages(btx_handle, &btx_push_usr_messages);
  }
TEXT

def parse_event(line)
  h = { hostname: nil,
        name: nil,
        field_values: [] }
  # Parse a token one at a time
  head, tail = line.split(nil, 2)
  # Timestamp?
  if head.start_with?('[')
    t = Time.parse(head[1...-1])
    # Need to convert in nasosecond
    h[:field_values] << ((t.to_i * 1_000_000_000) + t.nsec)
    # discard next token, the offset "(+x.xxxxxxxx)", which
    # always follows the bracketed timestamp
    _, head, tail = tail.split(nil, 3)
  end
  # Hostname?
  unless head.end_with?(':')
    h[:hostname] = head
    head, tail = tail.split(nil, 2)
  end
  h[:name] = head.chop.gsub(/[^0-9A-Za-z-]/, '_')
  # Handle the fields
  h[:field_values] += tail.scan(REGEXT_PRETTY).flatten
  h
end

def parse_log(input_path)
  File.open(input_path, 'r') do |file|
    file.each_line.map do |line|
      parse_event(line)
    end
  end
end

def render_and_save(data, output_path)
  renderer = ERB.new(SOURCE_TEMPLATE, trim_mode: '-')
  output = renderer.result(binding)
  File.write(output_path, output, mode: 'w')
end

DOCS = <<-DOCS.freeze
  Usage: #{$0}.rb [options]

  Example:
    ruby #{$0} -y stream_classes.yaml -i btx_log.txt -o callbacks.c
DOCS

# Display help if no arguments.
ARGV << '-h' if ARGV.empty?

options = {}

OptionParser.new do |opts|
  opts.banner = DOCS

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end

  opts.on('-i', '--log PATH', '[Mandatory] Path to btx_log.txt.') do |p|
    options[:input_path] = p
  end

  opts.on('-o', '--output PATH', '[Mandatory] Path to the bt2 SOURCE file.') do |p|
    options[:output_path] = p
  end
end.parse!

raise OptionParser::MissingArgument if options[:output_path].nil?

data = options.key?(:input_path) ? parse_log(options[:input_path]) : []
render_and_save(data, options[:output_path])
