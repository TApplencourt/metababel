#!/usr/bin/env ruby

require 'yaml'
require 'optparse'
require 'erb'
require 'metababel'
require 'fileutils'

def validate_model(yaml)
  # Stream and event classes must have a 'name' as minimum requirement.
  raise "Missing 'name' attr in model #{yaml}" unless yaml[:stream_classes].all? do |d|
                                                        d.key?(:name) && d[:event_classes].all? do |d2|
                                                          d2.key?(:name)
                                                        end
                                                      end

  # Event class name must be unique
  events = yaml[:stream_classes].flat_map { |sc| sc[:event_classes] }.map { |e| e[:name] }
  raise "Duplicated 'event' in model #{yaml}" unless events.length == events.uniq.length
end

def sanitize(str)
  str.gsub(/[^0-9A-Za-z-]/, '_')
end

def btx_match?(str, pattern_or_str)
  # String beginning and ending in '/' are treated as regexp.
  is_regex = pattern_or_str.match?(%r{^/.+/$})
  is_regex ? eval(pattern_or_str).match?(str) : str == pattern_or_str
end

def btx_find_matching_arg(match_arg, evt_args)
  matching_args = evt_args.find_all { |evt_arg| btx_match?(evt_arg.name, match_arg) }
  unless matching_args.length < 2
    raise "match_arg '#{match_arg}' matching multiple event_args '#{matching_args.join(', ')}'."
  end

  matching_args.pop
end

def btx_get_matching_args(evt_name, evt_args, match_name, match_args)
  # If doesn't match the name, we can shortcut
  return nil unless btx_match?(evt_name, match_name)

  matching_args = match_args.map { |m| btx_find_matching_arg(m, evt_args) }
  # Check that all match_args have found a match
  return nil unless matching_args.all?
  # An event args match multiple match args
  unless matching_args.length == matching_args.uniq.length
    raise "event_args '#{matching_args.map(&:name).join(', ')}' matched by multiple match_args '#{match_args.join(', ')}'."
  end

  matching_args
end

class Array
  def join_with_prefix(sep)
    empty? ? '' : "#{sep}#{join(sep)}"
  end
end

class Hash
  # Copy pasted from rails (https://apidock.com/rails/Hash/deep_merge%21)
  def deep_merge!(other_hash, &block)
    merge!(other_hash) do |key, this_val, other_val|
      if this_val.is_a?(Hash) && other_val.is_a?(Hash)
        this_val.deep_merge(other_val, &block)
      elsif block_given?
        block.call(key, this_val, other_val)
      else
        other_val
      end
    end
  end

  def deep_merge(other_hash, &block)
    dup.deep_merge!(other_hash, &block)
  end
end

DispatchType = Struct.new(:name, :args, :id) do
  def name_sanitized
    sanitize(name)
  end
end

Dispatcher = Struct.new(:name, :args, :body, :index_stream_class,
                        :index_event_class, :default_clock_class,
                        :args_to_free, :dispatch_types) do
  def name_sanitized
    sanitize(name)
  end
end

def erb_render_and_save(vars,
                        basename, out_folder, out_name: nil, prefix: 'btx_')
  template = File.read(File.join(__dir__, "../template/#{basename}.erb"))
  # We need to trim line who contain only with space, because we indent our erb block <% %>
  # The trim_mode remove line only when it's start with the erb block
  # The regex remove the lines who are not indented
  # Maybe related to `https://github.com/ruby/erb/issues/24`
  str = ERB.new(template, trim_mode: '<>').result_with_hash(vars).gsub(/^ +$\n/, '')
  File.open(File.join(out_folder, "#{prefix}#{out_name || basename}"), 'w') do |f|
    f.write(str)
  end
end

class Babeltrace2Gen::BTTraceClass
  def map_event_classes_with_index
    @stream_classes.map.with_index do |s, index_stream_class|
      s.event_classes.map.with_index do |e, index_event_class|
        yield(e, index_stream_class, index_event_class, s.default_clock_class)
      end
    end.flatten
  end
end

class GeneratedArg < Struct.new(:type, :name)
end

# We preprent an empty new line from the body as a hack, to correct the indentation
# Indeeed the <%= body %> will be indented, but we don't don't want it,
# in the body string is already indented
# But we clean the white space empty line afterward \o/
def wrote_event_dispatchers(folder, t, matching_dispatch_data, callback_types)
  event_name = 'event'

  dispatchers = t.map_event_classes_with_index do |e, index_stream_class, index_event_class, default_clock_class|
    arg_variables = {}
    body = Babeltrace2Gen.context(indent: 1) do
      e.get_getter(event: event_name, arg_variables: arg_variables)
    end

    # Automatic event dispatcher
    evt_args = []
    evt_args += [GeneratedArg.new('int64_t', '_timestamp')] if default_clock_class
    evt_args += arg_variables.fetch('outputs', [])
    dispatch_types = [DispatchType.new(e.name_sanitized, evt_args, 'generic')]

    # User event dispatchers
    usr_evt_args = evt_args + [GeneratedArg.new('const char *', '_event_class_name')]
    dispatch_types += matching_dispatch_data.filter_map do |md|
      dispatcher_evt_args = btx_get_matching_args(e.name, usr_evt_args, md[:regex], md.fetch(:args, []))
      unless dispatcher_evt_args.nil?
        DispatchType.new(sanitize(md[:name]), dispatcher_evt_args,
                         "matching_#{sanitize(md[:name])}")
      end
    end

    Dispatcher.new(
      e.name, arg_variables.fetch('outputs', []),
      body, index_stream_class, index_event_class,
      default_clock_class,
      arg_variables.fetch('outputs_allocated', []),
      dispatch_types
    )
  end

  dispatcher_types_to_dispatchers = Hash.new { |h, k| h[k] = [] }
  dispatchers.each do |dispatch|
    dispatch.dispatch_types.each do |dispatch_type|
      dispatcher_types_to_dispatchers[dispatch_type] << dispatch
    end
  end

  d = { dispatchers: dispatchers,
        dispatcher_types_to_dispatchers: dispatcher_types_to_dispatchers,
        callback_types: callback_types,
        event_name: event_name }

  erb_render_and_save(d, 'upstream.h', folder)
  erb_render_and_save(d, 'upstream.c', folder)
end

def wrote_creates(folder, t)
  event_name = 'event'
  downstream_events = t.map_event_classes_with_index do |e, index_stream_class, index_event_class, default_clock_class|
    arg_variables = {}
    body = Babeltrace2Gen.context(indent: 1) do
      e.get_setter(event: event_name, arg_variables: arg_variables)
    end
    Dispatcher.new(e.name, arg_variables.fetch('outputs', []), "\n" + body, index_stream_class, index_event_class,
                   default_clock_class)
  end

  body_declarator_classes = "\n" + Babeltrace2Gen.context(indent: 1) do
    t.get_declarator(variable: 'trace_class', self_component: 'self_component')
  end

  d = { body_declarator_classes: body_declarator_classes,
        downstream_events: downstream_events,
        stream_classes: t.stream_classes,
        event_name: event_name }

  erb_render_and_save(d, 'downstream.h', folder)
  erb_render_and_save(d, 'downstream.c', folder)
end

def wrote_component(options, d, folder)
  static_callbacks = [Dispatcher.new('initialize_usr_data',
                                     [GeneratedArg.new('void **', 'usr_data_p')]),
                      Dispatcher.new('finalize_usr_data',
                                     [GeneratedArg.new('void *', 'usr_data')]),
                      Dispatcher.new('read_params',
                                     [GeneratedArg.new('void *', 'usr_data'),
                                      GeneratedArg.new('btx_params_t *', 'usr_params')])]

  if options[:component_type] == 'SOURCE'
    static_callbacks << Dispatcher.new('push_usr_messages',
                                       [GeneratedArg.new('void *', 'usr_data'),
                                        GeneratedArg.new('btx_source_status_t*', 'status')])
  end

  d2 = { event_name: 'dummy_event',
         static_callback_types: static_callbacks }

  erb_render_and_save(d2.update(d).update(options: options), 'component.h', folder)
  erb_render_and_save(d2.update(d).update(options: options), 'component.c', folder)
end

# Display help if no arguments.
ARGV << '-h' if ARGV.empty?

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: example.rb [options]'

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end

  opts.on('-v', '--version', 'Prints this help') do
    puts "Ruby: #{RUBY_VERSION}"
    puts "Metababel: #{Metababel::VERSION}"
    exit
  end

  opts.on('-t', '--component TYPE', '[Mandatory] Node within a trace processing graph.') do |p|
    options[:component_type] = p
  end

  opts.on('-u', '--upstreams PATH', Array, '[Mandatory] Path to the bt2 yaml file.') do |p|
    options[:upstreams] = p
  end

  opts.on('-d', '--downstream PATH', '[Optional] Path to the bt2 yaml file.') do |p|
    options[:downstream] = p
  end

  opts.on('-p', '--plugin-name PATH', '[Optional] Name of the bt2 plugin created.') do |p|
    options[:plugin_name] = p
  end

  opts.on('-c', '--component-name PATH', '[Optional] Name of the bt2 componant created.') do |p|
    options[:component_name] = p
  end

  opts.on('--params PATH', '[Optional] Name of YAML params definition.') do |p|
    options[:params] = p
  end

  opts.on('--callbacks PATH', '[Optional] Name of YAML defining matching callbacks.') do |p|
    options[:callbacks] = p
  end

  opts.on('-o', '--output FOLDER', '[Optional] Output folder path.') do |p|
    options[:folder] = p
  end

  opts.on('-i', '--usr-data-header NAME', '[Optional] User datatypes definitions.') do |p|
    options[:usr_data_header] = p
  end
end.parse!

raise OptionParser::MissingArgument if options[:component_type].nil?

options[:plugin_name] ||= "metababel_#{options[:component_type].downcase}"
options[:component_name] ||= 'btx'

# Babeltrace can be extended by plugins, which provide one or more component classes.
base_folder = options[:folder] || "#{options[:component_type]}.#{options[:plugin_name]}.#{options[:component_name]}"
folder = "#{base_folder}/metababel"
FileUtils.mkdir_p(folder)

d = { options: options }

d[:params_declaration] = ''
d[:params_definition] = ''
if options.key?(:params)
  y = YAML.load_file(options[:params])
  c = Babeltrace2Gen::BTValueCLass.from_h(y)
  body = Babeltrace2Gen.context(indent: 1) do
    c.get('usr_params', 'params')
  end
  d[:params_declaration] = c.get_struct_definition('params')
  d[:params_definition] = body
else
  d[:params_declaration] = 'char _dummy;'
end

erb_render_and_save(d, "#{options[:component_type].downcase}.c", base_folder, out_name: 'main.c')
erb_render_and_save({ options: options }, 'metababel.h', folder, prefix: '')

matching_dispatch_data = options.key?(:callbacks) ? YAML.load_file(options[:callbacks]) : []

callback_types = matching_dispatch_data.map { |c| "matching_#{sanitize(c[:name])}" }.prepend('generic')
d[:callback_types] = callback_types

wrote_component(options, d, folder)
if %w[SOURCE FILTER].include?(options[:component_type])
  raise 'Missing downstream model' unless options[:downstream]

  y = YAML.load_file(options[:downstream])
  validate_model(y)
  t = Babeltrace2Gen::BTTraceClass.from_h(nil, y)
  wrote_creates(folder, t)
end

if %w[FILTER SINK].include?(options[:component_type])
  raise 'Missing upstream models' unless options[:upstreams]

  y = options[:upstreams].reduce({}) do |y, upstream|
    # Need to specialize for merging arrays
    y.deep_merge(YAML.load_file(upstream)) { |_key, old, new| old + new }
  end
  validate_model(y)
  t = Babeltrace2Gen::BTTraceClass.from_h(nil, y)
  wrote_event_dispatchers(folder, t, matching_dispatch_data, callback_types)
end
