#include "component.h"
#include "dispatch.h"
#include "utarray.h"
#include "uthash.h"
#include <babeltrace2/babeltrace.h>

<% dispatchers.each do |e| %>
static void
btx_dispatch_<%= e.name_sanitized %>(UT_array *callbacks,
                                     common_data_t *common_data,
                                     const bt_event *<%= event_name %>) {

  <% e.args.each do |s| %>
  <%= s.type %> <%= s.name %>;
  <% end %>
  <%= e.body %>
  // Call all the callbacks who where registered
  // Their type are declared in 'dispatch.h'
  <%= e.name_sanitized %>_callback_f **p = NULL;
  while ((p = utarray_next(callbacks, p))) {
    (*p)((void *)common_data, common_data->usr_data,
         <%= e.args.map{ |s| s.name }.join(", ") %>);
  }
}

void btx_register_callbacks_<%= e.name_sanitized %>(
    void *btx_handle, <%= e.name_sanitized %>_callback_f *callback) {
  // Look-up our dispatcher
  btx_handle_t *s = NULL;
  btx_handle_t **btx_handle =
      (btx_handle_t **)btx_handle;
  HASH_FIND_STR(*btx_handle, "<%= e.name %>", s);
  if (!s) {
    // We didn't find the dispatcher, so we need to:
    // 1. Create it
    s = (btx_handle_t *)malloc(sizeof(btx_handle_t));
    s->name = "<%= e.name %>";
    s->dispatcher = (void *)&btx_dispatch_<%= e.name_sanitized %>;
    utarray_new(s->callbacks, &ut_ptr_icd);
    // 2. Register it
    HASH_ADD_KEYPTR(hh, *btx_handle, s->name, strlen(s->name), s);
  }
  // Add the callbacks to the array
  utarray_push_back(s->callbacks, &callback);
}
<% end %>
