#include <babeltrace2/babeltrace.h>
#include <metababel/btx_component.h>
// stdio needed because `params_definition` contain fprintf
<% if params_definition %>
#include <stdio.h>
<% end %>

void btx_populate_params(common_data_t *common_data) {
  <% if params_definition %>
  const bt_value *_params = common_data->params;
  btx_params_t *_usr_params = common_data->btx_params;
  <%= params_definition %>
  <% end %>
}

<% static_callback_types.each do |e| %>
void btx_register_callbacks_<%= e.name_sanitized %>(
    void *btx_handle, <%= e.name_sanitized %>_static_callback_f *callback) {
  ((common_data_t *)btx_handle)->static_callbacks-><%= e.name_sanitized %> =
      callback;
}

void btx_call_callbacks_<%= e.name_sanitized %>(
    common_data_t *common_data,
    <%= e.args.map{ |s| "#{s.type} #{s.name}" }.join(", ") %>) {

  <%= e.name_sanitized %>_static_callback_f *p =
      common_data->static_callbacks-><%= e.name_sanitized %>;
  if (p)
    p( <%= "(void *)common_data," unless e.no_btx_handle %>
       <%= e.args.map{ |s| s.name }.join(", ") %>);
}
<% end %>

void btx_unregister_callbacks(common_data_t *common_data) {
  name_to_dispatcher_t *current, *tmp;
  HASH_ITER(hh, common_data->name_to_dispatcher, current, tmp) {
    HASH_DEL(common_data->name_to_dispatcher, current);
    <% callback_types.each do |id| %>
    if (current->callbacks-><%= id %>)
      utarray_free(current->callbacks-><%= id %>);
    <% end %>
    free(current->callbacks);
    free(current);
  }
}
