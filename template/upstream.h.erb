#pragma once
#include <metababel/btx_component.h>
#ifdef __cplusplus
extern "C" {
#endif

// Dispatcher
typedef void(dispatcher_t)(UT_array *callbacks, common_data_t *common_data,
                           const bt_event *message);

<% event_dispatchers.each do |e| %>
<%# The signature type of callbacks %>
typedef void
<%= e.name_sanitized %>_callback_f(void *btx_handle, void *usr_data,
                                   <%= e.args.map{ |s| s.type }.join(", ") %>);
<%# The Function who register the callbacks to the dispatcher %>
extern void btx_register_callbacks_<%= e.name_sanitized %>(
    void *btx_handle, <%= e.name_sanitized %>_callback_f *callback);
<% end %>

void btx_delete_dispatchers(common_data_t *common_data);

// Matching dispatcher
<% stream_classes_matching_dispatchers.each do |s| %>
<%# The signature type of condition callbacks %>
typedef bool
<%= s.name_sanitized %>_callback_condition_f(void *btx_handle, void *usr_data, const char* event_class_name,
                                             <%= s.args.map{ |a| a.type }.join(", ") %>);

<%# The signature type of callbacks to be called if the condition is met %>
typedef void
<%= s.name_sanitized %>_conditioned_callback_f(void *btx_handle, void *usr_data, const char* event_class_name,
                       <%= s.args.map{ |a| a.type }.join(", ") %>);

typedef struct  <%= s.name_sanitized %>_condition_to_callback_s {
    <%= s.name_sanitized %>_callback_condition_f *condition;
    <%= s.name_sanitized %>_conditioned_callback_f *callback;
};

typedef struct <%= s.name_sanitized %>_condition_to_callback_s  <%= s.name_sanitized %>_condition_to_callback_t;

extern void btx_register_matching_callback_<%= s.name_sanitized %>(void *btx_handle,
                                                                   <%= s.name_sanitized %>_callback_condition_f *condition,
                                                                   <%= s.name_sanitized %>_conditioned_callback_f *callback);
<% end %>

void btx_delete_matching_dispatchers(common_data_t *common_data);

#ifdef __cplusplus
}
#endif
