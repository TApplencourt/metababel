#pragma once

#include "utarray.h"
#include "uthash.h"
#include <babeltrace2/babeltrace.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

// Forward declaration of common_data
struct common_data_s;
typedef struct common_data_s common_data_t;

// Params
// Avoid icx error: empty struct has size 0 in C, size 1 in C++
// [-Werror,-Wextern-c-compat]
struct btx_params_s {
  <% if params_declaration %>
  <%= params_declaration %>
  <% else %>
  char _dummy;
  <% end %>

}; <%# Need empty line for nice code gen %>
typedef struct btx_params_s btx_params_t;

void btx_populate_params(common_data_t *common_data_t);

<% if options.key?(:usr_data_header) %>
#include "<%= options[:usr_data_header] %>"
<% end %>

struct callbacks_s {
  <% callback_types.each do |c| %>
  UT_array *<%= c %>;
  <% end %>
};
typedef struct callbacks_s callbacks_t;

<%# Forward Declaration %>
struct static_callbacks_s;
typedef struct static_callbacks_s static_callbacks_t;

struct name_to_dispatcher_s {
  const char *name;
  void *dispatcher;
  callbacks_t *callbacks;
  UT_hash_handle hh;
};
typedef struct name_to_dispatcher_s name_to_dispatcher_t;

<% if ['SOURCE', 'FILTER'].include?(options[:component_type]) %>
// Structure for Downstream Message
struct el {
  const bt_message *message;
  struct el *next, *prev;
};

<% end %>
// Struct stored in the component via `bt_self_component_set_data`
<% if options[:component_type] == 'SOURCE' %>
struct common_data_s {
  name_to_dispatcher_t *name_to_dispatcher;
  static_callbacks_t *static_callbacks;

  void *usr_data;
  const bt_value *params;
  btx_params_t *btx_params;
  bt_trace *downstream_trace;
  /* Used by downstream.c */
  bt_self_message_iterator *self_message_iterator;
};

enum btx_source_state_e {
  BTX_SOURCE_STATE_INITIALIZING,
  BTX_SOURCE_STATE_PROCESSING,
  BTX_SOURCE_STATE_FINALIZING,
  BTX_SOURCE_STATE_FINISHED,
  BTX_SOURCE_STATE_ERROR,
};
typedef enum btx_source_state_e btx_source_state_t;

/* Message iterator's private data */
struct btx_message_iterator_s {
  /* (Weak) link to the component's private data */
  common_data_t *common_data;
  btx_source_state_t state;

  /* Handling the downstream message queue */
  struct el *queue;
  struct el *pool;
};
typedef struct btx_message_iterator_s btx_message_iterator_t;

enum btx_source_status_e {
  BTX_SOURCE_END,
  BTX_SOURCE_OK,
};
typedef enum btx_source_status_e btx_source_status_t;

<% elsif options[:component_type] == 'FILTER' %>
struct common_data_s {
  name_to_dispatcher_t *name_to_dispatcher;
  static_callbacks_t *static_callbacks;

  void *usr_data;
  const bt_value *params;
  btx_params_t *btx_params;
  /* Component's input port (weak) */
  const bt_component_filter *component;
  bt_trace *downstream_trace;
  /* Used by downstream.c */
  bt_self_message_iterator *self_message_iterator;
};

enum btx_filter_state_e {
  BTX_FILTER_STATE_INITIALIZING,
  BTX_FILTER_STATE_PROCESSING,
  BTX_FILTER_STATE_FINALIZING,
  BTX_FILTER_STATE_FINISHED,
  BTX_FILTER_STATE_ERROR,
};
typedef enum btx_filter_state_e btx_filter_state_t;

enum btx_filter_processing_state_e {
  BTX_FILTER_PROCESSING_STATE_READING,
  BTX_FILTER_PROCESSING_STATE_SENDING,
  BTX_FILTER_PROCESSING_STATE_FINISHED,
};
typedef enum btx_filter_processing_state_e btx_filter_processing_state_t;

typedef struct el_mi {
  /* Upstream message iterator (owned by this) */
  bt_message_iterator *message_iterator;
  struct el_mi *next, *prev;
} el_mi;

/* Message iterator's private data */
struct btx_message_iterator_s {
  /* (Weak) link to the component's private data */
  common_data_t *common_data;
  /*  Upstream messages iterator */
  el_mi *head_mi;
  btx_filter_state_t state;
  btx_filter_processing_state_t processing_state;
  /* Handling the downstream message queue */
  struct el *queue;
  struct el *pool;
};
typedef struct btx_message_iterator_s btx_message_iterator_t;

<% elsif options[:component_type] == 'SINK' %>
struct common_data_s {
  name_to_dispatcher_t *name_to_dispatcher;
  static_callbacks_t *static_callbacks;

  void *usr_data;
  const bt_value *params;
  btx_params_t *btx_params;
  /* Upstream message iterator (owned by this) */
  bt_message_iterator *message_iterator;
};
<% end %>

void btx_register_usr_callbacks(void *btx_handle);

<% static_callback_types.each do |e| %>
typedef void <%= e.name_sanitized %>_static_callback_f(
    void *btx_handle, <%= e.args.map{ |s| s.type }.join(", ") %>);

<%# The Function who register the callbacks to the dispatcher %>
void btx_register_callbacks_<%= e.name_sanitized %>(
    void *btx_handle, <%= e.name_sanitized %>_static_callback_f *callback);

void btx_call_callbacks_<%= e.name_sanitized %>(
    common_data_t *common_data, <%= e.args.map{ |s| s.type }.join(", ") %>);
<% end %>

struct static_callbacks_s {
  <% static_callback_types.each do |e| %>
  <%= e.name_sanitized %>_static_callback_f *<%= e.name_sanitized %>;
  <% end %>
};

#ifdef __cplusplus
}
#endif
