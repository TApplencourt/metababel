#include "component.h"
#include "utlist.h"
#include <babeltrace2/babeltrace.h>
#include <stdlib.h>

void btx_downstream_initialize(common_data_t *common_data,
                               bt_message_array_const messages,
                               uint64_t capacity, uint64_t *count) {
  common_data->messages = messages;
  common_data->capacity = capacity;
  common_data->count = count;
}

void btx_downstream_drain_queue(common_data_t *common_data,
                                bt_message_array_const messages,
                                uint64_t capacity, uint64_t *count) {
  // Set count to min(capacity, common_data->queue.size())
  // Count time, pop the head of the queue and put it in messages
  for (*count = 0; *count < capacity && common_data->queue; (*count)++) {
    struct el *elt = common_data->queue;
    messages[*count] = elt->message;
    DL_DELETE(common_data->queue, elt);
    // Put it back to the bool of chain for reuse
    DL_APPEND(common_data->pool, elt);
  }
}

void btx_downstream_push_message(struct common_data_s *common_data,
                                 const bt_message *message) {

  if (common_data->capacity &&
      (*(common_data->count) < common_data->capacity)) {
    common_data->messages[*(common_data->count)++] = message;
    return;
  }

  struct el *elt;
  if (common_data->pool) {
    elt = common_data->pool;
    DL_DELETE(common_data->pool, elt);
  } else {
    elt = (struct el *)malloc(sizeof *elt);
  }
  elt->message = message;
  DL_APPEND(common_data->queue, elt);
}

bt_trace_class *
btx_downstream_trace_class_create_rec(bt_self_component *self_component) {
  bt_trace_class *trace_class = bt_trace_class_create(self_component);
  <%= body_declarator_classes %>
  return trace_class;
}

bt_trace *btx_downstream_trace_create_rec(bt_trace_class *trace_class) {
  bt_trace *trace = bt_trace_create(trace_class);
  <% stream_classes.each_with_index do |_,i| %>
  {
    bt_stream_class *stream_class =
        bt_trace_class_borrow_stream_class_by_index(trace_class, <%= i %>);
    bt_stream_create(stream_class, trace);
  }
  <% end %>
  return trace;
}

void btx_push_messages_stream_beginning(struct common_data_s *common_data) {
  bt_trace *trace = common_data->downstream_trace;
  <% stream_classes.each_with_index do |_,i| %>
  {
    bt_stream *stream = bt_trace_borrow_stream_by_index(trace, <%= i %>);
    bt_message *message = bt_message_stream_beginning_create(
        common_data->self_message_iterator, stream);
    btx_downstream_push_message(common_data, message);
  }
  <% end %>
}

void btx_push_messages_stream_end(struct common_data_s *common_data) {
  bt_trace *trace = common_data->downstream_trace;
  <% stream_classes.each_with_index do |_,i| %>
  {
    bt_stream *stream = bt_trace_borrow_stream_by_index(trace, <%= i %>);
    bt_message *message = bt_message_stream_end_create(
        common_data->self_message_iterator, stream);
    btx_downstream_push_message(common_data, message);
  }
  <% end %>
}

<% downstream_events.each do |e| %>
static void btx_set_message_<%= e.name_sanitized %>(
    bt_event *<%= event_name %>,
    <%= e.args.map{ |s| "#{s.type} #{s.name}" }.join(", ") %>) {
  <%= e.body %>
}

void btx_push_message_<%= e.name_sanitized %>(
    struct common_data_s *common_data,
    <%= e.args.map{ |s| "#{s.type} #{s.name}" }.join(", ") %>) {
  bt_stream *stream = bt_trace_borrow_stream_by_index(
      common_data->downstream_trace, <%= e.index_stream_class %>);
  bt_stream_class *stream_class = bt_stream_borrow_class(stream);
  bt_event_class *event_class = bt_stream_class_borrow_event_class_by_index(
      stream_class, <%= e.index_event_class %>);

  bt_message *message = bt_message_event_create(
      common_data->self_message_iterator, event_class, stream);
  bt_event *downstream_event = bt_message_event_borrow_event(message);

  btx_set_message_<%= e.name_sanitized %>(
      downstream_event, <%= e.args.map{ |s| s.name }.join(", ") %>);

  btx_downstream_push_message(common_data, message);
}
<% end %>
