#include "utarray.h"
#include "uthash.h"
#include <assert.h>
#include <babeltrace2/babeltrace.h>
#include <metababel/btx_component.h>
#include <metababel/btx_upstream.h>
#include <stdbool.h>
#include <stdlib.h>

<% dispatchers.each do |dispatcher| %>
static void btx_dispatch_<%= dispatcher.name_sanitized %>(
    callbacks_t *callbacks, common_data_t *common_data,
    const bt_message *upstream_message) {

  <% dispatcher.args.each do |s| %>
  <%= s.type %> <%= s.name %>;
  <% end %>

  <%# Since now event is a variable, we need to check if the body will render variables that accesses it.  %>
  <% if not dispatcher.body.empty? %>
  const bt_event *<%= event_name %> =
      bt_message_event_borrow_event_const(upstream_message);
  <%= "\n" + dispatcher.body %>
  <% end %>
  <% if dispatcher.default_clock_class %>
  int64_t _timestamp;
  const bt_clock_snapshot *clock_snapshot =
      bt_message_event_borrow_default_clock_snapshot_const(upstream_message);
  bt_clock_snapshot_get_ns_from_origin(clock_snapshot, &_timestamp);
  <% end %>
  <%# event_class_name, only required when at least one matching callback match it as argument.  %>
  <% if dispatcher.dispatch_types.map(&:args).flatten.any? { |arg| arg.name == '_event_class_name' } %>
  const char *_event_class_name = "<%= dispatcher.name_sanitized %>";
  <% end %>

  // Call registered matching callbacks
  <% dispatcher.dispatch_types.each do |dispatch_type| %>
  {
    if (callbacks-><%= dispatch_type.id %>) {
      void **p = NULL;
      while ((p = utarray_next(callbacks-><%= dispatch_type.id %>, p))) {
        (*((<%= dispatch_type.name_sanitized %>_callback_f **)(p)))(
            (void *)common_data,
            common_data
                ->usr_data<%= dispatch_type.args.map{ |a| a.name }.join_with_prefix(", ") %>);
      }
    }
  }

  <% end %>
  <% dispatcher.args_to_free.each do |s| %>
  <%= "free(#{s.name});" %>
  <% end %>
}

<% end %>
<% dispatchers.each do |dispatcher| %>
void btx_generic_register_callback_<%= dispatcher.name_sanitized %>(
    void *btx_handle, const char *id, void *callback) {
  // Look-up our dispatcher
  name_to_dispatcher_t *s = NULL;
  name_to_dispatcher_t **name_to_dispatcher =
      &((common_data_t *)btx_handle)->name_to_dispatcher;
  HASH_FIND_STR(*name_to_dispatcher, "<%= dispatcher.name %>", s);
  if (!s) {
    // We didn't find the dispatcher, so we need to create it.
    s = (name_to_dispatcher_t *)malloc(sizeof(name_to_dispatcher_t));
    s->name = "<%= dispatcher.name %>";
    s->dispatcher = (void *)&btx_dispatch_<%= dispatcher.name_sanitized %>;
    s->callbacks = calloc(1, sizeof(callbacks_t));
    // 2. Register it
    HASH_ADD_KEYPTR(hh, *name_to_dispatcher, s->name, strlen(s->name), s);
  }

  <% dispatcher.dispatch_types.each do |dispatch_type| %>
  if (strcmp("<%= dispatch_type.id %>", id) == 0) {
    // Add the callbacks to the array
    if (!s->callbacks-><%= dispatch_type.id %>)
      utarray_new(s->callbacks-><%= dispatch_type.id %>, &ut_ptr_icd);
    utarray_push_back(s->callbacks-><%= dispatch_type.id %>, &callback);
  }

  <% end %>
}

<% end %>
<% dispatcher_types_to_dispatchers.each do |dispatch_type, dispatchers| %>
void btx_register_callbacks_<%= dispatch_type.name_sanitized %>(
    void *btx_handle,
    <%= dispatch_type.name_sanitized %>_callback_f *callback) {
  <% dispatchers.each do |dispatcher| %>
  btx_generic_register_callback_<%= dispatcher.name_sanitized %>(
      btx_handle, "<%= dispatch_type.id %>", (void *)callback);
  <% end %>
}

<% end %>
void btx_delete_dispatchers(common_data_t *common_data) {
  name_to_dispatcher_t *current, *tmp;
  HASH_ITER(hh, common_data->name_to_dispatcher, current, tmp) {
    HASH_DEL(common_data->name_to_dispatcher, current);
    <% callback_types.each do |name| %>
    if (current->callbacks-><%= name %>)
      utarray_free(current->callbacks-><%= name %>);
    <% end %>
    free(current->callbacks);
    free(current);
  }
}
